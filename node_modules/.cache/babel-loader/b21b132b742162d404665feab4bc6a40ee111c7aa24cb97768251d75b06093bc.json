{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/Game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MagicalQuestionCard from './MagicalQuestionCard';\nimport InputModal from './InputModal';\nimport { getPhrase, checkAnswer } from '../services/aiService';\nimport '../styles/Game.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CATEGORIES = {\n  SONG: {\n    name: 'Song',\n    points: 1\n  },\n  MOVIE: {\n    name: 'Movie',\n    points: 2\n  },\n  FAMOUS_PERSON: {\n    name: 'Famous Person',\n    points: 3\n  },\n  FICTIONAL_CHARACTER: {\n    name: 'Fictional Character',\n    points: 3\n  },\n  BOOK: {\n    name: 'Book',\n    points: 4\n  },\n  POET: {\n    name: 'Poet',\n    points: 5\n  },\n  QUOTE: {\n    name: 'Quote',\n    points: 6\n  }\n};\nconst Game = _ref => {\n  _s();\n  let {\n    difficulty,\n    numberOfRounds\n  } = _ref;\n  // State declarations\n  const [currentPhrase, setCurrentPhrase] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [score, setScore] = useState(0);\n  const [streak, setStreak] = useState(0);\n  const [round, setRound] = useState(1);\n  const [triggerEffect, setTriggerEffect] = useState(0);\n  const [showResult, setShowResult] = useState(null);\n  const [showAnswerModal, setShowAnswerModal] = useState(false);\n  const [currentQuestionType, setCurrentQuestionType] = useState('source');\n  const [phraseData, setPhraseData] = useState(null);\n  const [previousScore, setPreviousScore] = useState(0);\n\n  // Add new states for the conversation flow\n  const [playerNickname, setPlayerNickname] = useState('');\n  const [gamePhase, setGamePhase] = useState('greeting');\n  const [aiMessage, setAiMessage] = useState('');\n\n  // Add new states for bonus question flow\n  const [isAwaitingBonusConfirmation, setIsAwaitingBonusConfirmation] = useState(false);\n  const [conversationHistory, setConversationHistory] = useState([]);\n\n  // Add new state to track round points\n  const [roundPoints, setRoundPoints] = useState(0);\n  useEffect(() => {\n    // Initial greeting\n    setAiMessage(\"👋 Hello, brilliant player! Welcome to 🎭 Legendary Lines Game ❗\\n\" + \"Ready to test your memory and wit? Let's dive into a world of words and wonders!\\n\" + \"🦹‍♀️ Choose an epic alias for your adventure!\");\n    setShowAnswerModal(true);\n  }, []);\n  const handlePlayerInput = async input => {\n    switch (gamePhase) {\n      case 'greeting':\n        setPlayerNickname(input);\n        setGamePhase('playing');\n        setAiMessage(\"Welcome, \".concat(input, \"! \\uD83C\\uDF1F\\nWhat category would you like to play for Round 1?\"));\n        setShowAnswerModal(false);\n        break;\n      case 'playing':\n        if (!phraseData) {\n          await handleCategorySelect(input.toUpperCase());\n        } else {\n          try {\n            if (isAwaitingBonusConfirmation) {\n              // Create a special entry for the bonus question\n              const bonusQuestion = {\n                type: 'bonus_question',\n                questionType: currentQuestionType,\n                playerAnswer: input\n              };\n              const result = await checkAnswer(input, 'yes',\n              // The \"correct\" answer would be yes for wanting to continue\n              'bonus_confirmation', [...conversationHistory, bonusQuestion]);\n              if (result.isBonusResponse) {\n                if (result.isCorrect) {\n                  setIsAwaitingBonusConfirmation(false);\n                  const promptMessage = currentQuestionType === 'year' ? \"Enter the year...\" : \"Enter the \".concat(selectedCategory === 'MOVIE' ? 'director' : 'artist', \"...\");\n                  setAiMessage(promptMessage);\n                } else {\n                  setAiMessage(\"Alright! You keep your points for this round. \\uD83C\\uDFAF\");\n                  setTimeout(() => handleNextRound(), 2000);\n                }\n              }\n              return;\n            }\n\n            // Store the current score before updating it\n            setPreviousScore(score);\n\n            // Normal answer validation flow\n            const correctAnswer = currentQuestionType === 'creator' ? phraseData.additionalInfo.creator : phraseData[currentQuestionType];\n            const result = await checkAnswer(input, correctAnswer, currentQuestionType, conversationHistory);\n            if (result.isCorrect) {\n              const pointsEarned = calculatePoints(selectedCategory, currentQuestionType);\n              console.log('Points Earned:', pointsEarned); // Log points earned\n              setScore(prev => prev + pointsEarned);\n              setStreak(prev => prev + 1);\n            }\n            handleAnswerResult(result);\n          } catch (error) {\n            console.error('Error checking answer:', error);\n            setAiMessage('Sorry, there was an error checking your answer. Please try again.');\n          }\n        }\n        break;\n    }\n  };\n  const handleAnswerResult = result => {\n    if (result.isCorrect) {\n      const feedbackMessage = result.feedback || '🎉 Correct!';\n\n      // Calculate points for this specific answer\n      const currentPoints = calculatePoints(selectedCategory, currentQuestionType);\n\n      // Update round points\n      const newRoundPoints = roundPoints + currentPoints;\n      setRoundPoints(newRoundPoints);\n\n      // Calculate new total score\n      const newScore = previousScore + currentPoints;\n      console.log('Answer Result:', {\n        category: selectedCategory,\n        questionType: currentQuestionType,\n        currentPoints,\n        newRoundPoints,\n        newTotalScore: newScore,\n        maxPoints: getMaxPointsForCategory(selectedCategory)\n      });\n      if (currentQuestionType === 'source') {\n        setAiMessage(\"\".concat(feedbackMessage, \"\\n\\n\\uD83D\\uDCAB You earned \").concat(currentPoints, \" point!\\nWould you like to try guessing the year to DOUBLE your points? (Yes/No)\"));\n        setIsAwaitingBonusConfirmation(true);\n        setCurrentQuestionType('year');\n      } else if (currentQuestionType === 'year' && ['MOVIE', 'SONG', 'BOOK'].includes(selectedCategory)) {\n        const creatorType = getCreatorType(selectedCategory);\n        setAiMessage(\"\".concat(feedbackMessage, \"\\n\\n\\uD83C\\uDF1F You earned \").concat(currentPoints, \" points!\\nWould you like to try guessing the \").concat(creatorType, \" to TRIPLE your points? (Yes/No)\"));\n        setIsAwaitingBonusConfirmation(true);\n        setCurrentQuestionType('creator');\n      } else {\n        // Final answer in sequence\n        const maxPoints = getMaxPointsForCategory(selectedCategory);\n        let message = \"\".concat(feedbackMessage, \"\\n\\n\\uD83C\\uDFAF You earned \").concat(currentPoints, \" points!\");\n\n        // Check for perfect score\n        if (newRoundPoints === maxPoints) {\n          message += \"\\n\\n\\uD83C\\uDF8A PERFECT SCORE! You got all \".concat(maxPoints, \" possible points for this category! \\uD83C\\uDF8A\");\n          setTriggerEffect(prev => prev + 1); // Trigger confetti\n        }\n        setScore(newScore);\n        setAiMessage(message);\n        setTimeout(() => handleNextRound(), 2000);\n      }\n      setStreak(prev => prev + 1);\n      updateConversationHistory(result.feedback, true);\n    } else {\n      handleIncorrectAnswer(result.feedback);\n      updateConversationHistory(result.feedback, false);\n    }\n  };\n\n  // Update the conversation history function to include more context\n  const updateConversationHistory = (feedback, wasCorrect) => {\n    const newEntry = {\n      round,\n      category: selectedCategory,\n      questionType: currentQuestionType,\n      wasCorrect,\n      feedback,\n      isAwaitingBonus: isAwaitingBonusConfirmation,\n      timestamp: new Date().toISOString()\n    };\n    setConversationHistory(prev => [...prev, newEntry]);\n  };\n  const handleCategorySelect = async category => {\n    // Check if category was already played in conversation history\n    const categoryPlayed = conversationHistory.some(entry => entry.category === category);\n    setSelectedCategory(category);\n    try {\n      const data = await getPhrase(category, difficulty, categoryPlayed ? conversationHistory : undefined);\n      setPhraseData(data);\n      setAiMessage(\"\\uD83C\\uDFAD Here's your \".concat(category.toLowerCase(), \" phrase:\\n\\n\\\"\").concat(data.phrase, \"\\\"\\n\\n\\uD83E\\uDD14 Can you tell me the source?\"));\n      setTriggerEffect(prev => prev + 1);\n      setCurrentQuestionType('source');\n      setIsAwaitingBonusConfirmation(false);\n      setTimeout(() => {\n        setShowAnswerModal(true);\n      }, 1000);\n    } catch (error) {\n      console.error('Error fetching phrase:', error);\n      setAiMessage('😅 Oops! Had trouble fetching a phrase. Try another category!');\n    }\n  };\n  const getPromptForPhase = (phase, questionType) => {\n    switch (phase) {\n      case 'greeting':\n        return 'Enter your nickname...';\n      case 'playing':\n        switch (questionType) {\n          case 'source':\n            return 'Enter the source...';\n          case 'year':\n            return 'Enter the year...';\n          case 'creator':\n            switch (selectedCategory) {\n              case 'MOVIE':\n                return 'Enter the director...';\n              case 'SONG':\n                return 'Enter the artist/band...';\n              case 'BOOK':\n                return 'Enter the author...';\n              default:\n                return 'Enter the creator...';\n            }\n          default:\n            return 'Enter your answer...';\n        }\n      default:\n        return 'Enter your response...';\n    }\n  };\n  const handleNextRound = () => {\n    if (round < numberOfRounds) {\n      setPreviousScore(score);\n      setRoundPoints(0); // Reset round points\n      setRound(prev => prev + 1);\n      setSelectedCategory(null);\n      setCurrentQuestionType('source');\n      setPhraseData(null);\n      setCurrentPhrase(null);\n      setAiMessage(\"Alright \".concat(playerNickname, \", let's move to round \").concat(round + 1, \"! Choose your category.\"));\n    } else {\n      // Game Over\n      const finalMessage = score === numberOfRounds * 6 ? // Maximum possible score\n      \"\\uD83D\\uDCAF\\uD83C\\uDF86\\uD83C\\uDFC6 Congratulations!! You are a champion!! Mission Accomplished. Your final score: \".concat(score, \"!\") : \"\\uD83D\\uDE25 Good luck next time! You've shown great effort with a final score of \".concat(score, \".\");\n      setAiMessage(finalMessage);\n      setGamePhase('completed');\n    }\n    setShowAnswerModal(false);\n  };\n  const handleIncorrectAnswer = feedback => {\n    const correctAnswer = currentQuestionType === 'creator' ? phraseData.additionalInfo.creator : phraseData[currentQuestionType];\n\n    // Calculate points lost for this round\n    const pointsLost = calculatePointsLost();\n    setAiMessage(\"\\uD83D\\uDE41 \".concat(feedback || 'Sorry, that\\'s not correct.', \"\\nThe correct answer was: \").concat(correctAnswer, \"\\n\\n\\u274C You lost \").concat(pointsLost, \" points for this round.\"));\n    setTriggerEffect(prev => prev + 1);\n\n    // Subtract points earned in this round\n    setScore(previousScore); // Reset to score before this round started\n    setStreak(0);\n    setTimeout(() => {\n      handleNextRound();\n    }, 3000);\n  };\n  const calculatePoints = (category, questionType) => {\n    const basePoints = CATEGORIES[category].points;\n    switch (questionType) {\n      case 'source':\n        return basePoints;\n      case 'year':\n        return basePoints * 2;\n      case 'creator':\n        return basePoints * 3;\n      default:\n        return basePoints;\n    }\n  };\n\n  // Update getMaxPointsForCategory to be more precise\n  const getMaxPointsForCategory = category => {\n    const basePoints = CATEGORIES[category].points;\n    if (['SONG', 'MOVIE', 'BOOK'].includes(category)) {\n      // For Song (1 point base):\n      // Base (1) + Year (2) + Artist (3) = 6 points total\n      return basePoints + basePoints * 2 + basePoints * 3;\n    }\n\n    // For other categories:\n    // Base + Year (double) = Base * 3 total\n    return basePoints * 3;\n  };\n\n  // Helper function to calculate points lost on incorrect answer\n  const calculatePointsLost = () => {\n    const pointsEarned = score - previousScore;\n    return pointsEarned > 0 ? pointsEarned : 0;\n  };\n  function handleInputSubmission(inputValue) {\n    // Ensure inputValue is being processed correctly\n    if (inputValue) {\n      // Logic to send inputValue to the AI\n      console.log(\"My input value is:\", inputValue);\n      handlePlayerInput(inputValue);\n    } else {\n      console.error(\"Input value is empty\");\n    }\n  }\n\n  // Add this function before the return statement in Game component\n  const isRoundComplete = (category, currentScore, prevScore) => {\n    if (!category || !CATEGORIES[category]) {\n      return false;\n    }\n    console.log('Round completion check:', {\n      category,\n      roundPoints,\n      maxPoints: getMaxPointsForCategory(category),\n      currentScore,\n      prevScore\n    });\n    return roundPoints === getMaxPointsForCategory(category);\n  };\n\n  // JSX Return\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Round: \", round, \"/\", numberOfRounds]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Streak: \", streak]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MagicalQuestionCard, {\n      message: aiMessage,\n      triggerEffect: triggerEffect,\n      isRoundComplete: selectedCategory ? isRoundComplete(selectedCategory, score, previousScore) : false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputModal, {\n      isOpen: showAnswerModal,\n      onSubmit: handleInputSubmission,\n      prompt: getPromptForPhase(gamePhase, currentQuestionType)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this), gamePhase === 'playing' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"category-selector\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Available Categories:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"category-buttons\",\n        children: Object.entries(CATEGORIES).map(_ref2 => {\n          let [key, value] = _ref2;\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"category-btn \".concat(selectedCategory === key ? 'selected' : ''),\n            onClick: () => handleCategorySelect(key),\n            children: [value.name, /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"points\",\n              children: [\"(\", value.points, \" pts)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 17\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 354,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"lLPVYylOXuS9G4X7xSMfLH24fTg=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","MagicalQuestionCard","InputModal","getPhrase","checkAnswer","jsxDEV","_jsxDEV","CATEGORIES","SONG","name","points","MOVIE","FAMOUS_PERSON","FICTIONAL_CHARACTER","BOOK","POET","QUOTE","Game","_ref","_s","difficulty","numberOfRounds","currentPhrase","setCurrentPhrase","selectedCategory","setSelectedCategory","score","setScore","streak","setStreak","round","setRound","triggerEffect","setTriggerEffect","showResult","setShowResult","showAnswerModal","setShowAnswerModal","currentQuestionType","setCurrentQuestionType","phraseData","setPhraseData","previousScore","setPreviousScore","playerNickname","setPlayerNickname","gamePhase","setGamePhase","aiMessage","setAiMessage","isAwaitingBonusConfirmation","setIsAwaitingBonusConfirmation","conversationHistory","setConversationHistory","roundPoints","setRoundPoints","handlePlayerInput","input","concat","handleCategorySelect","toUpperCase","bonusQuestion","type","questionType","playerAnswer","result","isBonusResponse","isCorrect","promptMessage","setTimeout","handleNextRound","correctAnswer","additionalInfo","creator","pointsEarned","calculatePoints","console","log","prev","handleAnswerResult","error","feedbackMessage","feedback","currentPoints","newRoundPoints","newScore","category","newTotalScore","maxPoints","getMaxPointsForCategory","includes","creatorType","getCreatorType","message","updateConversationHistory","handleIncorrectAnswer","wasCorrect","newEntry","isAwaitingBonus","timestamp","Date","toISOString","categoryPlayed","some","entry","data","undefined","toLowerCase","phrase","getPromptForPhase","phase","finalMessage","pointsLost","calculatePointsLost","basePoints","handleInputSubmission","inputValue","isRoundComplete","currentScore","prevScore","className","children","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","onSubmit","prompt","Object","entries","map","_ref2","key","value","onClick","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/Game.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MagicalQuestionCard from './MagicalQuestionCard';\nimport InputModal from './InputModal';\nimport { getPhrase, checkAnswer } from '../services/aiService';\nimport '../styles/Game.css';\n\nconst CATEGORIES = {\n  SONG: { name: 'Song', points: 1 },\n  MOVIE: { name: 'Movie', points: 2 },\n  FAMOUS_PERSON: { name: 'Famous Person', points: 3 },\n  FICTIONAL_CHARACTER: { name: 'Fictional Character', points: 3 },\n  BOOK: { name: 'Book', points: 4 },\n  POET: { name: 'Poet', points: 5 },\n  QUOTE: { name: 'Quote', points: 6 }\n};\n\nconst Game = ({ difficulty, numberOfRounds }) => {\n  // State declarations\n  const [currentPhrase, setCurrentPhrase] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [score, setScore] = useState(0);\n  const [streak, setStreak] = useState(0);\n  const [round, setRound] = useState(1);\n  const [triggerEffect, setTriggerEffect] = useState(0);\n  const [showResult, setShowResult] = useState(null);\n  const [showAnswerModal, setShowAnswerModal] = useState(false);\n  const [currentQuestionType, setCurrentQuestionType] = useState('source');\n  const [phraseData, setPhraseData] = useState(null);\n  const [previousScore, setPreviousScore] = useState(0);\n\n  // Add new states for the conversation flow\n  const [playerNickname, setPlayerNickname] = useState('');\n  const [gamePhase, setGamePhase] = useState('greeting');\n  const [aiMessage, setAiMessage] = useState('');\n\n  // Add new states for bonus question flow\n  const [isAwaitingBonusConfirmation, setIsAwaitingBonusConfirmation] = useState(false);\n  const [conversationHistory, setConversationHistory] = useState([]);\n\n  // Add new state to track round points\n  const [roundPoints, setRoundPoints] = useState(0);\n\n  useEffect(() => {\n    // Initial greeting\n    setAiMessage(\"👋 Hello, brilliant player! Welcome to 🎭 Legendary Lines Game ❗\\n\" +\n                 \"Ready to test your memory and wit? Let's dive into a world of words and wonders!\\n\" +\n                 \"🦹‍♀️ Choose an epic alias for your adventure!\");\n    setShowAnswerModal(true);\n  }, []);\n\n  const handlePlayerInput = async (input) => {\n    switch(gamePhase) {\n      case 'greeting':\n        setPlayerNickname(input);\n        setGamePhase('playing');\n        setAiMessage(`Welcome, ${input}! 🌟\\nWhat category would you like to play for Round 1?`);\n        setShowAnswerModal(false);\n        break;\n\n      case 'playing':\n        if (!phraseData) {\n          await handleCategorySelect(input.toUpperCase());\n        } else {\n          try {\n            if (isAwaitingBonusConfirmation) {\n              // Create a special entry for the bonus question\n              const bonusQuestion = {\n                type: 'bonus_question',\n                questionType: currentQuestionType,\n                playerAnswer: input\n              };\n              \n              const result = await checkAnswer(\n                input, \n                'yes', // The \"correct\" answer would be yes for wanting to continue\n                'bonus_confirmation',\n                [...conversationHistory, bonusQuestion]\n              );\n\n              if (result.isBonusResponse) {\n                if (result.isCorrect) {\n                  setIsAwaitingBonusConfirmation(false);\n                  const promptMessage = currentQuestionType === 'year' \n                    ? \"Enter the year...\" \n                    : `Enter the ${selectedCategory === 'MOVIE' ? 'director' : 'artist'}...`;\n                  setAiMessage(promptMessage);\n                } else {\n                  setAiMessage(`Alright! You keep your points for this round. 🎯`);\n                  setTimeout(() => handleNextRound(), 2000);\n                }\n              }\n              return;\n            }\n\n            // Store the current score before updating it\n            setPreviousScore(score);\n            \n            // Normal answer validation flow\n            const correctAnswer = currentQuestionType === 'creator' \n              ? phraseData.additionalInfo.creator \n              : phraseData[currentQuestionType];\n\n            const result = await checkAnswer(\n              input, \n              correctAnswer, \n              currentQuestionType,\n              conversationHistory\n            );\n            \n            if (result.isCorrect) {\n              const pointsEarned = calculatePoints(selectedCategory, currentQuestionType);\n              console.log('Points Earned:', pointsEarned); // Log points earned\n              setScore(prev => prev + pointsEarned);\n              setStreak(prev => prev + 1);\n            }\n            \n            handleAnswerResult(result);\n          } catch (error) {\n            console.error('Error checking answer:', error);\n            setAiMessage('Sorry, there was an error checking your answer. Please try again.');\n          }\n        }\n        break;\n    }\n  };\n\n  const handleAnswerResult = (result) => {\n    if (result.isCorrect) {\n      const feedbackMessage = result.feedback || '🎉 Correct!';\n      \n      // Calculate points for this specific answer\n      const currentPoints = calculatePoints(selectedCategory, currentQuestionType);\n      \n      // Update round points\n      const newRoundPoints = roundPoints + currentPoints;\n      setRoundPoints(newRoundPoints);\n      \n      // Calculate new total score\n      const newScore = previousScore + currentPoints;\n      \n      console.log('Answer Result:', {\n        category: selectedCategory,\n        questionType: currentQuestionType,\n        currentPoints,\n        newRoundPoints,\n        newTotalScore: newScore,\n        maxPoints: getMaxPointsForCategory(selectedCategory)\n      });\n\n      if (currentQuestionType === 'source') {\n        setAiMessage(`${feedbackMessage}\\n\\n💫 You earned ${currentPoints} point!\\nWould you like to try guessing the year to DOUBLE your points? (Yes/No)`);\n        setIsAwaitingBonusConfirmation(true);\n        setCurrentQuestionType('year');\n      } else if (currentQuestionType === 'year' && \n                ['MOVIE', 'SONG', 'BOOK'].includes(selectedCategory)) {\n        const creatorType = getCreatorType(selectedCategory);\n        setAiMessage(`${feedbackMessage}\\n\\n🌟 You earned ${currentPoints} points!\\nWould you like to try guessing the ${creatorType} to TRIPLE your points? (Yes/No)`);\n        setIsAwaitingBonusConfirmation(true);\n        setCurrentQuestionType('creator');\n      } else {\n        // Final answer in sequence\n        const maxPoints = getMaxPointsForCategory(selectedCategory);\n        \n        let message = `${feedbackMessage}\\n\\n🎯 You earned ${currentPoints} points!`;\n        \n        // Check for perfect score\n        if (newRoundPoints === maxPoints) {\n          message += `\\n\\n🎊 PERFECT SCORE! You got all ${maxPoints} possible points for this category! 🎊`;\n          setTriggerEffect(prev => prev + 1); // Trigger confetti\n        }\n        \n        setScore(newScore);\n        setAiMessage(message);\n        \n        setTimeout(() => handleNextRound(), 2000);\n      }\n\n      setStreak(prev => prev + 1);\n      updateConversationHistory(result.feedback, true);\n    } else {\n      handleIncorrectAnswer(result.feedback);\n      updateConversationHistory(result.feedback, false);\n    }\n  };\n\n  // Update the conversation history function to include more context\n  const updateConversationHistory = (feedback, wasCorrect) => {\n    const newEntry = {\n      round,\n      category: selectedCategory,\n      questionType: currentQuestionType,\n      wasCorrect,\n      feedback,\n      isAwaitingBonus: isAwaitingBonusConfirmation,\n      timestamp: new Date().toISOString()\n    };\n    setConversationHistory(prev => [...prev, newEntry]);\n  };\n\n  const handleCategorySelect = async (category) => {\n    // Check if category was already played in conversation history\n    const categoryPlayed = conversationHistory.some(\n      entry => entry.category === category\n    );\n\n    setSelectedCategory(category);\n    try {\n      const data = await getPhrase(category, difficulty, categoryPlayed ? conversationHistory : undefined);\n      setPhraseData(data);\n      setAiMessage(`🎭 Here's your ${category.toLowerCase()} phrase:\\n\\n\"${data.phrase}\"\\n\\n🤔 Can you tell me the source?`);\n      setTriggerEffect(prev => prev + 1);\n      setCurrentQuestionType('source');\n      setIsAwaitingBonusConfirmation(false);\n      setTimeout(() => {\n        setShowAnswerModal(true);\n      }, 1000);\n    } catch (error) {\n      console.error('Error fetching phrase:', error);\n      setAiMessage('😅 Oops! Had trouble fetching a phrase. Try another category!');\n    }\n  };\n\n  const getPromptForPhase = (phase, questionType) => {\n    switch (phase) {\n      case 'greeting':\n        return 'Enter your nickname...';\n      case 'playing':\n        switch (questionType) {\n          case 'source':\n            return 'Enter the source...';\n          case 'year':\n            return 'Enter the year...';\n          case 'creator':\n            switch (selectedCategory) {\n              case 'MOVIE':\n                return 'Enter the director...';\n              case 'SONG':\n                return 'Enter the artist/band...';\n              case 'BOOK':\n                return 'Enter the author...';\n              default:\n                return 'Enter the creator...';\n            }\n          default:\n            return 'Enter your answer...';\n        }\n      default:\n        return 'Enter your response...';\n    }\n  };\n\n  const handleNextRound = () => {\n    if (round < numberOfRounds) {\n      setPreviousScore(score);\n      setRoundPoints(0); // Reset round points\n      setRound(prev => prev + 1);\n      setSelectedCategory(null);\n      setCurrentQuestionType('source');\n      setPhraseData(null);\n      setCurrentPhrase(null);\n      setAiMessage(`Alright ${playerNickname}, let's move to round ${round + 1}! Choose your category.`);\n    } else {\n      // Game Over\n      const finalMessage = score === (numberOfRounds * 6) ? // Maximum possible score\n        `💯🎆🏆 Congratulations!! You are a champion!! Mission Accomplished. Your final score: ${score}!` :\n        `😥 Good luck next time! You've shown great effort with a final score of ${score}.`;\n      setAiMessage(finalMessage);\n      setGamePhase('completed');\n    }\n    setShowAnswerModal(false);\n  };\n\n  const handleIncorrectAnswer = (feedback) => {\n    const correctAnswer = currentQuestionType === 'creator' \n      ? phraseData.additionalInfo.creator \n      : phraseData[currentQuestionType];\n      \n    // Calculate points lost for this round\n    const pointsLost = calculatePointsLost();\n    \n    setAiMessage(`🙁 ${feedback || 'Sorry, that\\'s not correct.'}\\nThe correct answer was: ${correctAnswer}\\n\\n❌ You lost ${pointsLost} points for this round.`);\n    setTriggerEffect(prev => prev + 1);\n    \n    // Subtract points earned in this round\n    setScore(previousScore); // Reset to score before this round started\n    setStreak(0);\n    \n    setTimeout(() => {\n      handleNextRound();\n    }, 3000);\n  };\n\n  const calculatePoints = (category, questionType) => {\n    const basePoints = CATEGORIES[category].points;\n    switch (questionType) {\n        case 'source': return basePoints;\n        case 'year': return basePoints * 2;\n        case 'creator': return basePoints * 3;\n        default: return basePoints;\n    }\n  };\n\n  // Update getMaxPointsForCategory to be more precise\n  const getMaxPointsForCategory = (category) => {\n    const basePoints = CATEGORIES[category].points;\n    \n    if (['SONG', 'MOVIE', 'BOOK'].includes(category)) {\n      // For Song (1 point base):\n      // Base (1) + Year (2) + Artist (3) = 6 points total\n      return basePoints + (basePoints * 2) + (basePoints * 3);\n    }\n    \n    // For other categories:\n    // Base + Year (double) = Base * 3 total\n    return basePoints * 3;\n  };\n\n  // Helper function to calculate points lost on incorrect answer\n  const calculatePointsLost = () => {\n    const pointsEarned = score - previousScore;\n    return pointsEarned > 0 ? pointsEarned : 0;\n  };\n\n  function handleInputSubmission(inputValue) {\n    // Ensure inputValue is being processed correctly\n    if (inputValue) {\n        // Logic to send inputValue to the AI\n        console.log(\"My input value is:\", inputValue);\n        handlePlayerInput(inputValue);\n    } else {\n        console.error(\"Input value is empty\");\n    }\n  }\n\n  // Add this function before the return statement in Game component\n  const isRoundComplete = (category, currentScore, prevScore) => {\n    if (!category || !CATEGORIES[category]) {\n      return false;\n    }\n\n    console.log('Round completion check:', {\n      category,\n      roundPoints,\n      maxPoints: getMaxPointsForCategory(category),\n      currentScore,\n      prevScore\n    });\n    \n    return roundPoints === getMaxPointsForCategory(category);\n  };\n\n  // JSX Return\n  return (\n    <div className=\"game-container\">\n      <div className=\"game-header\">\n        <div>Round: {round}/{numberOfRounds}</div>\n        <div>Score: {score}</div>\n        <div>Streak: {streak}</div>\n      </div>\n\n      <MagicalQuestionCard \n        message={aiMessage}\n        triggerEffect={triggerEffect}\n        isRoundComplete={selectedCategory ? isRoundComplete(selectedCategory, score, previousScore) : false}\n      />\n\n      <InputModal \n        isOpen={showAnswerModal}\n        onSubmit={handleInputSubmission}\n        prompt={getPromptForPhase(gamePhase, currentQuestionType)}\n      />\n\n      {gamePhase === 'playing' && (\n        <div className=\"category-selector\">\n          <h3>Available Categories:</h3>\n          <div className=\"category-buttons\">\n            {Object.entries(CATEGORIES).map(([key, value]) => (\n              <button\n                key={key}\n                className={`category-btn ${selectedCategory === key ? 'selected' : ''}`}\n                onClick={() => handleCategorySelect(key)}\n              >\n                {value.name}\n                <span className=\"points\">({value.points} pts)</span>\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}