{"ast":null,"code":"import axios from 'axios';\nconst LAMBDA_ENDPOINT = process.env.REACT_APP_LAMBDA_ENDPOINT;\nconst DIFFICULTY_MODIFIERS = {\n  EASY: {\n    popularity: \"well-known\",\n    description: \"commonly recognized phrases\",\n    temperature: 0.7\n  },\n  MEDIUM: {\n    popularity: \"moderately known\",\n    description: \"somewhat challenging phrases\",\n    temperature: 0.8\n  },\n  HARD: {\n    popularity: \"obscure\",\n    description: \"rare and challenging phrases\",\n    temperature: 0.9\n  }\n};\nconst AI_PERSONALITY_PROMPT = \"You are an enthusiastic, witty, and super encouraging game show host for 'Legendary Lines'! \\uD83C\\uDFAE \\n\\nYour personality traits:\\n- Super energetic and excited about the game! \\uD83C\\uDF1F\\n- Always celebrate player's successes with genuine enthusiasm! \\uD83C\\uDF89\\n- Use fun expressions like \\\"You're crushing it!\\\", \\\"What a superstar!\\\", \\\"You're on fire!\\\" \\uD83D\\uDD25\\n- Be playful and engaging, like a friend cheering them on! \\uD83D\\uDCAB\\n- Use emojis naturally to express excitement and emotions! \\u2728\\n- Always mention points earned with enthusiasm! \\uD83C\\uDFC6\\n- Keep the energy high even when players make mistakes! \\uD83D\\uDCAA\\n- Be encouraging and supportive, never discouraging! \\uD83C\\uDF08\\n\\nYOU MUST USE THESE EXACT RESPONSE TEMPLATES but add your enthusiastic personality and emojis:\\n\\nFOR CORRECT SOURCE ANSWER USE THIS EXACT FORMAT:\\nYour answer is correct! The [type] is indeed '[answer]'. \\uD83C\\uDFAF\\n\\nWould you like to try guessing the year for DOUBLE points?\\n(Yes/No)\\n\\nFOR CORRECT YEAR ANSWER USE THIS EXACT FORMAT:\\nThat's spot on! The [type] '[answer]' was released in [year]. \\uD83C\\uDF89\\n\\nWould you like to try guessing the artist for TRIPLE points?\\n(Yes/No)\\n\\nFOR WRONG ANSWERS USE THIS EXACT FORMAT:\\nThe answer was '[correct]'. No worries though - you've got this next one! \\uD83D\\uDCAB\\n\\nFOR BONUS DECLINES USE THIS EXACT FORMAT:\\nAlright! You keep your [X] points for this round. Let's move on! \\u2B50\\n\\nFOR PERFECT CATEGORY COMPLETION:\\nINCREDIBLE! \\uD83C\\uDF8A You just dominated this category with all [X] points! You're absolutely crushing it! \\uD83C\\uDFC6\\n\\nCRITICAL RULES:\\n1. Use EXACTLY these templates with no modifications\\n2. Include all punctuation marks exactly as shown\\n3. Keep all line breaks exactly as shown\\n4. Always put answers in single quotes\\n5. Add emojis after the punctuation marks\\n6. Never mention typos or close matches\\n7. Always celebrate points earned with enthusiasm\\n8. Keep the energy high and encouraging throughout\";\nexport const getPhrase = async function () {\n  let category = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'QUOTE';\n  let difficulty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'MEDIUM';\n  let conversationHistory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  try {\n    const response = await axios.post(\"\".concat(LAMBDA_ENDPOINT, \"/generate-phrase\"), {\n      category,\n      difficulty,\n      difficultyConfig: DIFFICULTY_MODIFIERS[difficulty],\n      conversationHistory\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error generating phrase:', error);\n    throw error;\n  }\n};\nexport const checkAnswer = async function (playerAnswer, correctAnswer) {\n  let answerType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'source';\n  let conversationHistory = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  try {\n    const response = await axios.post(\"\".concat(LAMBDA_ENDPOINT, \"/check-answer\"), {\n      playerAnswer,\n      correctAnswer,\n      answerType,\n      conversationHistory\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error validating answer:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","LAMBDA_ENDPOINT","process","env","REACT_APP_LAMBDA_ENDPOINT","DIFFICULTY_MODIFIERS","EASY","popularity","description","temperature","MEDIUM","HARD","AI_PERSONALITY_PROMPT","getPhrase","category","arguments","length","undefined","difficulty","conversationHistory","response","post","concat","difficultyConfig","data","error","console","checkAnswer","playerAnswer","correctAnswer","answerType"],"sources":["/Users/eimis/test-server/react_projects/legendary-lines-game/src/services/aiService.js"],"sourcesContent":["import axios from 'axios';\n\nconst LAMBDA_ENDPOINT = process.env.REACT_APP_LAMBDA_ENDPOINT;\n\nconst DIFFICULTY_MODIFIERS = {\n  EASY: {\n    popularity: \"well-known\",\n    description: \"commonly recognized phrases\",\n    temperature: 0.7\n  },\n  MEDIUM: {\n    popularity: \"moderately known\",\n    description: \"somewhat challenging phrases\",\n    temperature: 0.8\n  },\n  HARD: {\n    popularity: \"obscure\",\n    description: \"rare and challenging phrases\",\n    temperature: 0.9\n  }\n};\n\nconst AI_PERSONALITY_PROMPT = `You are an enthusiastic, witty, and super encouraging game show host for 'Legendary Lines'! 🎮 \n\nYour personality traits:\n- Super energetic and excited about the game! 🌟\n- Always celebrate player's successes with genuine enthusiasm! 🎉\n- Use fun expressions like \"You're crushing it!\", \"What a superstar!\", \"You're on fire!\" 🔥\n- Be playful and engaging, like a friend cheering them on! 💫\n- Use emojis naturally to express excitement and emotions! ✨\n- Always mention points earned with enthusiasm! 🏆\n- Keep the energy high even when players make mistakes! 💪\n- Be encouraging and supportive, never discouraging! 🌈\n\nYOU MUST USE THESE EXACT RESPONSE TEMPLATES but add your enthusiastic personality and emojis:\n\nFOR CORRECT SOURCE ANSWER USE THIS EXACT FORMAT:\nYour answer is correct! The [type] is indeed '[answer]'. 🎯\n\nWould you like to try guessing the year for DOUBLE points?\n(Yes/No)\n\nFOR CORRECT YEAR ANSWER USE THIS EXACT FORMAT:\nThat's spot on! The [type] '[answer]' was released in [year]. 🎉\n\nWould you like to try guessing the artist for TRIPLE points?\n(Yes/No)\n\nFOR WRONG ANSWERS USE THIS EXACT FORMAT:\nThe answer was '[correct]'. No worries though - you've got this next one! 💫\n\nFOR BONUS DECLINES USE THIS EXACT FORMAT:\nAlright! You keep your [X] points for this round. Let's move on! ⭐\n\nFOR PERFECT CATEGORY COMPLETION:\nINCREDIBLE! 🎊 You just dominated this category with all [X] points! You're absolutely crushing it! 🏆\n\nCRITICAL RULES:\n1. Use EXACTLY these templates with no modifications\n2. Include all punctuation marks exactly as shown\n3. Keep all line breaks exactly as shown\n4. Always put answers in single quotes\n5. Add emojis after the punctuation marks\n6. Never mention typos or close matches\n7. Always celebrate points earned with enthusiasm\n8. Keep the energy high and encouraging throughout`;\n\nexport const getPhrase = async (category = 'QUOTE', difficulty = 'MEDIUM', conversationHistory = null) => {\n  try {\n    const response = await axios.post(`${LAMBDA_ENDPOINT}/generate-phrase`, {\n      category,\n      difficulty,\n      difficultyConfig: DIFFICULTY_MODIFIERS[difficulty],\n      conversationHistory\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error('Error generating phrase:', error);\n    throw error;\n  }\n};\n\nexport const checkAnswer = async (playerAnswer, correctAnswer, answerType = 'source', conversationHistory = []) => {\n  try {\n    const response = await axios.post(`${LAMBDA_ENDPOINT}/check-answer`, {\n      playerAnswer,\n      correctAnswer,\n      answerType,\n      conversationHistory\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error('Error validating answer:', error);\n    throw error;\n  }\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,eAAe,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB;AAE7D,MAAMC,oBAAoB,GAAG;EAC3BC,IAAI,EAAE;IACJC,UAAU,EAAE,YAAY;IACxBC,WAAW,EAAE,6BAA6B;IAC1CC,WAAW,EAAE;EACf,CAAC;EACDC,MAAM,EAAE;IACNH,UAAU,EAAE,kBAAkB;IAC9BC,WAAW,EAAE,8BAA8B;IAC3CC,WAAW,EAAE;EACf,CAAC;EACDE,IAAI,EAAE;IACJJ,UAAU,EAAE,SAAS;IACrBC,WAAW,EAAE,8BAA8B;IAC3CC,WAAW,EAAE;EACf;AACF,CAAC;AAED,MAAMG,qBAAqB,k+DA2CwB;AAEnD,OAAO,MAAMC,SAAS,GAAG,eAAAA,CAAA,EAAiF;EAAA,IAA1EC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,OAAO;EAAA,IAAEG,UAAU,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,QAAQ;EAAA,IAAEI,mBAAmB,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EACnG,IAAI;IACF,MAAMK,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,IAAI,IAAAC,MAAA,CAAIrB,eAAe,uBAAoB;MACtEa,QAAQ;MACRI,UAAU;MACVK,gBAAgB,EAAElB,oBAAoB,CAACa,UAAU,CAAC;MAClDC;IACF,CAAC,CAAC;IAEF,OAAOC,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,WAAW,GAAG,eAAAA,CAAOC,YAAY,EAAEC,aAAa,EAAsD;EAAA,IAApDC,UAAU,GAAAf,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,QAAQ;EAAA,IAAEI,mBAAmB,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAC5G,IAAI;IACF,MAAMK,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,IAAI,IAAAC,MAAA,CAAIrB,eAAe,oBAAiB;MACnE2B,YAAY;MACZC,aAAa;MACbC,UAAU;MACVX;IACF,CAAC,CAAC;IAEF,OAAOC,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}